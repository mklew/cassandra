DROP KEYSPACE  IF EXISTS mpptest;

DROP KEYSPACE  IF EXISTS mpptest_counters;

DROP KEYSPACE  IF EXISTS mpptest_counters_other;

DROP KEYSPACE  IF EXISTS mpptest_counters_bounds;

CREATE KEYSPACE "mpptest" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3} ;

create table mpptest.user_items (user_name varchar, item_id uuid, item_description text, primary key (user_name, item_id));

create table mpptest.items (item_id uuid, item_description text, price text, primary key (item_id));

create table mpptest.users_by_items (item_id uuid, user_name varchar, primary key (item_id, user_name));

CREATE KEYSPACE "mpptest_counters" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};

create table mpptest_counters.counter1 (id uuid, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

create table mpptest_counters.counter2 (id uuid, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

create table mpptest_counters.counter3 (id uuid, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

create table mpptest_counters.counter4 (id uuid, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

create table mpptest_counters.stop_after_proposed (id uuid, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

create table mpptest_counters.named_counters_counter1 (id text, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

create table mpptest_counters.named_counters_counter2 (id text, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

CREATE KEYSPACE "mpptest_counters_other" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};

create table mpptest_counters_other.counter1 (id uuid, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

create table mpptest_counters_other.named_counter1 (id text, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

CREATE KEYSPACE "mpptest_counters_bounds" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};

CREATE TABLE mpptest_counters_bounds.counter_one_for_all (id uuid, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

ALTER TABLE mpptest_counters_bounds.counter_one_for_all WITH extensions = { 'transaction_conflict_bounds' : 'ONE_FOR_ALL' };

CREATE TABLE mpptest_counters_bounds.counter_two_slices (id uuid, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

ALTER TABLE mpptest_counters_bounds.counter_two_slices WITH extensions = { 'transaction_conflict_bounds' : 'TOKEN_RANGE_SLICES', 'token_range_slices' : '2' };

CREATE TABLE mpptest_counters_bounds.counter_many_slices (id uuid, counter1 int, counter2 int, counter3 int, counter4 int, counter5 int, primary key (id));

ALTER TABLE mpptest_counters_bounds.counter_many_slices WITH extensions = { 'transaction_conflict_bounds' : 'TOKEN_RANGE_SLICES', 'token_range_slices' : '100000' };



